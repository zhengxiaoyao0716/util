// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-05-18 18:43:16.0831223 +0800 CST m=+0.006004201
package easyjson

// ObjectAt .
func (json *Object) ObjectAt(at string, defaults ...interface{}) (Object, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return nil, err
	}
	r, err := ObjectOf(v)
	if err != nil {
		return nil, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Object) MustObjectAt(at string, defaults ...interface{}) Object {
	r, err := json.ObjectAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// ObjectAt .
func (json *Array) ObjectAt(at int, defaults ...interface{}) (Object, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return nil, err
	}
	r, err := ObjectOf(v)
	if err != nil {
		return nil, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Array) MustObjectAt(at int, defaults ...interface{}) Object {
	r, err := json.ObjectAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// ArrayAt .
func (json *Object) ArrayAt(at string, defaults ...interface{}) (Array, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return nil, err
	}
	r, err := ArrayOf(v)
	if err != nil {
		return nil, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Object) MustArrayAt(at string, defaults ...interface{}) Array {
	r, err := json.ArrayAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// ArrayAt .
func (json *Array) ArrayAt(at int, defaults ...interface{}) (Array, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return nil, err
	}
	r, err := ArrayOf(v)
	if err != nil {
		return nil, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Array) MustArrayAt(at int, defaults ...interface{}) Array {
	r, err := json.ArrayAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// StringAt .
func (json *Object) StringAt(at string, defaults ...interface{}) (String, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return "", err
	}
	r, err := StringOf(v)
	if err != nil {
		return "", &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Object) MustStringAt(at string, defaults ...interface{}) String {
	r, err := json.StringAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// StringAt .
func (json *Array) StringAt(at int, defaults ...interface{}) (String, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return "", err
	}
	r, err := StringOf(v)
	if err != nil {
		return "", &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Array) MustStringAt(at int, defaults ...interface{}) String {
	r, err := json.StringAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// BooleanAt .
func (json *Object) BooleanAt(at string, defaults ...interface{}) (Boolean, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return false, err
	}
	r, err := BooleanOf(v)
	if err != nil {
		return false, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Object) MustBooleanAt(at string, defaults ...interface{}) Boolean {
	r, err := json.BooleanAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// BooleanAt .
func (json *Array) BooleanAt(at int, defaults ...interface{}) (Boolean, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return false, err
	}
	r, err := BooleanOf(v)
	if err != nil {
		return false, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Array) MustBooleanAt(at int, defaults ...interface{}) Boolean {
	r, err := json.BooleanAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// NumberAt .
func (json *Object) NumberAt(at string, defaults ...interface{}) (Number, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return 0, err
	}
	r, err := NumberOf(v)
	if err != nil {
		return 0, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Object) MustNumberAt(at string, defaults ...interface{}) Number {
	r, err := json.NumberAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}

// NumberAt .
func (json *Array) NumberAt(at int, defaults ...interface{}) (Number, error) {
	v, err := json.ValueAt(at, defaults...)
	if err != nil {
		return 0, err
	}
	r, err := NumberOf(v)
	if err != nil {
		return 0, &ValueTypeNotMatchError{refContainer{json}, at, err.(*TypeNotMatchError)}
	}
	return r, nil
}
func (json *Array) MustNumberAt(at int, defaults ...interface{}) Number {
	r, err := json.NumberAt(at, defaults...)
	if err != nil {
		panic(err)
	}
	return r
}
