// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-05-18 18:43:16.0831223 +0800 CST m=+0.006004201
package easyjson

// ObjectOf translate the interface to Object.
func ObjectOf(value interface{}) (Object, error) {
	switch value.(type) {
	case Object:
		return Object(value.(Object)), nil
	case map[string]interface{}:
		return Object(value.(map[string]interface{})), nil
	default:
		return nil, &TypeNotMatchError{value, "Object"}
	}
}
func MustObjectOf(value interface{}) Object {
	r, err := ObjectOf(value)
	if err != nil {
		panic(err)
	}
	return r
}

// ArrayOf translate the interface to Array.
func ArrayOf(value interface{}) (Array, error) {
	switch value.(type) {
	case Array:
		return Array(value.(Array)), nil
	case []interface{}:
		return Array(value.([]interface{})), nil
	default:
		return nil, &TypeNotMatchError{value, "Array"}
	}
}
func MustArrayOf(value interface{}) Array {
	r, err := ArrayOf(value)
	if err != nil {
		panic(err)
	}
	return r
}

// StringOf translate the interface to String.
func StringOf(value interface{}) (String, error) {
	switch value.(type) {
	case String:
		return String(value.(String)), nil
	case string:
		return String(value.(string)), nil
	default:
		return "", &TypeNotMatchError{value, "String"}
	}
}
func MustStringOf(value interface{}) String {
	r, err := StringOf(value)
	if err != nil {
		panic(err)
	}
	return r
}

// BooleanOf translate the interface to Boolean.
func BooleanOf(value interface{}) (Boolean, error) {
	switch value.(type) {
	case Boolean:
		return Boolean(value.(Boolean)), nil
	case bool:
		return Boolean(value.(bool)), nil
	default:
		return false, &TypeNotMatchError{value, "Boolean"}
	}
}
func MustBooleanOf(value interface{}) Boolean {
	r, err := BooleanOf(value)
	if err != nil {
		panic(err)
	}
	return r
}

// NumberOf translate the interface to Number.
func NumberOf(value interface{}) (Number, error) {
	switch value.(type) {
	case Number:
		return Number(value.(Number)), nil
	case float64:
		return Number(value.(float64)), nil
	case int:
		return Number(value.(int)), nil
	default:
		return 0, &TypeNotMatchError{value, "Number"}
	}
}
func MustNumberOf(value interface{}) Number {
	r, err := NumberOf(value)
	if err != nil {
		panic(err)
	}
	return r
}
